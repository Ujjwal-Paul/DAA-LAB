// #7 - Bellman Ford Algorithm

#include<bits/stdc++.h>
using namespace std;

vector<int> bellmanFord(int vertex, int source, vector<vector<int>>& adjList){
    vector<int> distance(vertex, INT_MAX);
    distance[source] = 0;
    
    for(int i=0;i<vertex - 1;i++){
        for(int j=0;j<adjList.size();j++){
            int u = adjList[j][0];
            int v = adjList[j][1];
            int w = adjList[j][2];
            
            if(distance[u] != INT_MAX && distance[u] + w < distance[v]){
                distance[v] = distance[u] + w;
            }
        }
    }
    
    for(int j=0;j<adjList.size();j++){
        int u = adjList[j][0];
        int v = adjList[j][1];
        int w = adjList[j][2];
        
        if(distance[u] != INT_MAX && distance[u] + w < distance[v]){
            return {-1};
        }
    }
    return distance;
}

void print(int source, vector<int>& distance){
    for(int i=0;i<distance.size();i++){
        cout << source << " to " << i << " Distance = " << distance[i] << endl;
    }
}

void solve(int vertex, vector<vector<int>>& adjList){
    int source;
    cout<<"Enter the Source Vertex: ";
    cin>>source;
    
    vector<int> distance = bellmanFord(vertex, source, adjList);
    if(distance.size() == 1 && distance[0] == -1){
        cout<<"Negative Edge cycle Found :(";
    }
    else print(source, distance);
}

int main(){
    int vertex, edges;
    cout<<"Enter the No. of Vertices and Edges: ";
    cin >> vertex >> edges;
    
    vector<vector<int>> adjList(edges, vector<int>(3));
    cout<<"Enter Edges in Source-Destination-Weight format:\n";
    for(int i=0;i<edges;i++){
        cin >> adjList[i][0] >> adjList[i][1] >> adjList[i][2];
    }
    
    solve(vertex, adjList);
    
    return 0;
}


/* 
--------SAMPLE INPUT & OUTPUT-----------
-----------Sample Input 1-----------
Sample Graph Image --> https://media.geeksforgeeks.org/wp-content/uploads/bellmanford1.png
Enter the No. of Vertices and Edges: 5 8
Enter Edges in Source-Destination-Weight format:
0 1 -1
0 2 4
1 2 3
1 3 2
3 1 1
1 4 2
3 2 5
4 3 -3
Enter the Source Vertex: 0
0 to 0 Distance = 0
0 to 1 Distance = -1
0 to 2 Distance = 2
0 to 3 Distance = -2
0 to 4 Distance = 1

*/
