// #8 - Floyd Warshall Algorithm

#include<bits/stdc++.h>
using namespace std;

void floydWarshall(int vertex, vector<vector<int>>& adjMatrix){
    for(int k=0;k<vertex;k++){
        for(int i=0;i<vertex;i++){
            for(int j=0;j<vertex;j++){
                if(adjMatrix[i][k] != INT_MAX && adjMatrix[k][j] != INT_MAX){
                    adjMatrix[i][j] = min(adjMatrix[i][j], adjMatrix[i][k] + adjMatrix[k][j]);
                }
            }
        }
    }
}

void print(vector<vector<int>>& distance){
    cout<<"The Final Distance Matrix will be:\n";
    for(int i=0;i<distance.size();i++){
        for(int j=0;j<distance.size();j++){
            if(i == j)cout << 0 << "\t\t";
            else if(distance[i][j] == INT_MAX)cout<<"INT\t\t";
            else cout << distance[i][j] << "\t\t";
        }
        cout<<endl;
    }
}

void solve(int vertex, vector<vector<int>>& adjList){
    vector<vector<int>> adjMatrix(vertex, vector<int>(vertex, INT_MAX));
    for(int i=0;i<adjList.size();i++){
        int u = adjList[i][0];
        int v = adjList[i][1];
        int w = adjList[i][2];
        
        adjMatrix[u][v] = w;
    }
    
    floydWarshall(vertex, adjMatrix);
    print(adjMatrix);
}

int main(){
    int vertex, edges;
    cout<<"Enter the No. of Vertices and Edges: ";
    cin >> vertex >> edges;
    
    vector<vector<int>> adjList(edges, vector<int>(3));
    cout<<"Enter Edges in Source-Destination-Weight format:\n";
    for(int i=0;i<edges;i++){
        cin >> adjList[i][0] >> adjList[i][1] >> adjList[i][2];
    }
    
    solve(vertex, adjList);
    
    return 0;
}


/* 
--------SAMPLE INPUT & OUTPUT-----------
-----------Sample Input 1-----------
Sample Graph Image --> https://www.techiedelight.com/wp-content/uploads/Floyd-Warshall-Algorithm.png
Enter the No. of Vertices and Edges: 4 5
Enter Edges in Source-Destination-Weight format:
0 2 -2
1 0 4
1 2 3
2 3 2
3 1 -1
The Final Distance Matrix will be:
0  -1  -2   0		
4   0   2   4		
5   1   0   2		
3  -1   1   0

*/
